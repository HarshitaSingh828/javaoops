// Online Java Compiler
// Use this editor to write, compile and run your Java code online
// class Test{
//     void show(int a){
//         System.out.println("1");
//     }
//     String show(int a){
//       System.out.println("2"); 
//     }
// }
// class HelloWorld {
//     public static void main(String[] args) {
//         Test t = new Test();
//         t.show(10);
//     }
// }
//can we overload main()? yes
// class Test{
//      void main(int a){
//         System.out.println("2"); 
//     }
// }
// class HelloWorld {
//     public static void main(String[] args) {
//          System.out.println("1");
//         Test t = new Test();
//         t.main(10);
//     }
// }

//method overloading
// 1.same class
// 2. same method name
// 3. but no of argument, seq of argument, datatype of argument can be diff....
// class Test{
//     void show(){
//         System.out.println("1");
//     }
//     void show(){
//         System.out.println("2");
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         Test t = new Test();
//         t.show();
//     }
// }

// class Test{
//     void show(){
//         System.out.println("1");
//     }
//     void show(int a){
//         System.out.println("2");
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         Test t = new Test();
//         t.show(10);
//     }
// }

// class Test{
//     void show(int a){
//         System.out.println("1");
//     }
//     void show(int b, int c){
//         System.out.println("2");
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         Test t = new Test();
//         t.show(10);
//         t.show(20,30);
//     }
// }

// class Test{
//     void show(int a , String s){
//         System.out.println("1 ");
//     }
//     void show(String s, int a){
//         System.out.println("2");
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         Test t = new Test();
//         t.show(123,"abc");
//         t.show("abc",123);
//     }
// }

// class Test{
//     void show(int a){
//         System.out.println("1 ");
//     }
//     void show(String s){
//         System.out.println("2");
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         Test t = new Test();
//         t.show(123);
//         t.show("abc");
//     }
// }

//method overriding
// 1.diff. cls
// 2.same method name
//3.but no of argument, seq of argument, datatype of argument must same....

// class x{
//     void func(){
//     System.out.println("1");
// }
// }
// class y extends x{
//     void func(){
//       System.out.println("2"); 
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         x x = new x();
//         x.func();
//         y y = new y();
//         y.func();
//     }
// }

// class x{
//     void func(int a, String s){
//     System.out.println("1");
// }
// }
// class y extends x{
//     void func(String s, int a){
//       System.out.println("2"); 
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         x x = new x();
//         x.func(10,"abc");
//         y y = new y();
//         y.func("abc",10);
//     }
// }

// class x{
//     void func(int a){
//     System.out.println("1");
// }
// }
// class y extends x{
//     void func(String s){
//       System.out.println("2"); 
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         x x = new x();
//         x.func(10);
//         y y = new y();
//         y.func("abc");
//     }
// }


// this keyword -> reference variable and it refers to object.
// use1 of this
// class test{
//     int i;//instance var
//     void setvalues(int i){
//         i = i;
//         // this.i =i
//     }
//     void show(){
//         System.out.println(i);
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         test t = new test();
//         t.setvalues(10);
//         t.show();
//     }
// }
//use 2 of this: calling methods implicitly
// class thisdemo{
//     void display(){
//         System.out.println("Hello");
//     }
//     void show(){
//         // display();
//         this.display();
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         thisdemo t = new thisdemo();
//         t.show();
//     }
// }

// use3 use to invoke current class constructor
// class testdemo{
//     testdemo(){
//         System.out.println("default constructor ");
//     }
//     testdemo(int a){
//         System.out.println("parameterised constructor");
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         // testdemo t = new testdemo();
//         testdemo t1 = new testdemo(10);
//     }
// }

// class testdemo{
//     testdemo(){
//         System.out.println("default constructor ");
//     }
//     testdemo(int a){
//         this();
//         System.out.println("parameterised constructor");
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
       
//         testdemo t1 = new testdemo(10);
//     }
// }

// class testdemo{
//     testdemo(){
//         this(10);
//         System.out.println("default constructor");
//     }
//     testdemo(int a){
//       System.out.println("parameterised constructor");  
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         testdemo td = new testdemo();
//     }
// }

// use4 can be passed as an argument in the method
// class testdemo{
//     void m1(testdemo t){
//         System.out.println("i am in m1 method");
//     }
//     void m2(){
//         m1(this);
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//      testdemo t = new testdemo();
//      t.m2();
//     }
// }

// use5 used to pass as an argument in the const.. call
// class test{
//     test(thisdemo td){
//         System.out.println("test class");
//     }
// }
// class thisdemo{
//     void m1(){
//         test t = new test(this);
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         thisdemo td = new thisdemo();
//         td.m1();
//   }
// }
// use6 used to return current cls instance from method
// class thisdemo{
//     thisdemo m1(){
//         return this;
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         thisdemo td = new thisdemo();
//         td.m1();
//   }
// }

// super- is a reference variable used to refer parent class variable
// class A{
//     int a = 30;
// }
// class B extends A{
//     int a = 20;
//     void show(int a){
//         System.out.println(a);
//         System.out.println(this.a);
//         System.out.println(super.a);
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         B b = new B();
//         b.show(10);
//     }
// }

// use2 used to call immediate parent cls method
// class A{
//     void m1(){
//         System.out.println("I am in m1 method");
//     }
// }
// class B extends A{
//     void show(){
//         super.m1();
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//         B b = new B();
//         b.show();
//     }
// }

// use3 used to call immediata parent cls constructor
// class A{
//     A(){
//         System.out.println("A");
//     }
// }
// class B extends A{
//     B(){
//         // super();
//     System.out.println("B");
//     }
// }
//  class HelloWorld{
//     public static void main(String[]args){
//         B obj = new B();
//     }
// }

// final keyword- can be used with variables, methods and class.
// variables becomes constant, methods cant be override, class cant be inherit or extend

// class HelloWorld{
//      public static void main(String[]args){
//          final int i = 10;
//          i = i + 20;
//          System.out.println(i);
//      }
// }

// class Demo{
//     final void m1(){
//         System.out.println("I am in demo class");
//     }
// }
// class Test extends Demo{
//   void m1(){
//         System.out.println("I am in test class");
//     }
// }
// class HelloWorld{
//     public static void main(String[]args){
//       Test t = new Test();
//       t.m1();
//     }
// }

final class demo{
    void m1(){
      System.out.println("I am in test class");  
    }
}
class test extends demo{
    void m1(){
        System.out.println("I am in test class");
    }
}
class HelloWorld{
    public static void main(String[]args){
      test t = new test();
      t.m1();
    }
}


